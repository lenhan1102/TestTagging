package com.example.testtagging;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.testtagging.entity.Room;
import com.example.testtagging.entity.Rule;

@RestController // This means that this class is a Controller
@RequestMapping(path="/rule") // This means URL's start with /demo (after Application path)
public class RuleController {
  private final RuleService ruleService;
  private final RoomService roomService;
  private final TaggingService taggingService;
  
  // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  public RuleController(RuleService ruleService, RoomService roomService, TaggingService taggingService) {
		this.ruleService = ruleService;
		this.roomService = roomService;
		this.taggingService = taggingService;
	}
  
  @PostMapping(path="/add") // Map ONLY POST Requests
  public void addNewUser (@RequestParam String dimension, 
		  @RequestParam String value, 
		  @RequestParam Integer target, 
		  @RequestParam String input, 
		  @RequestParam Integer rule_size) {
	  this.roomService.addRuleUpdate(dimension, value, target, input, rule_size);
	  this.ruleService.addRule(dimension, value, target, input, rule_size);
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request
  }
  @GetMapping(path="/helloo")
  public String getHello() {
	return "Hello";
	  
  }
  
  @GetMapping(path="/updateAllRule")
  public Object updateAllRule() {
	  List<Room> rooms = roomService.findAll();
	  List<Rule> rules = ruleService.findAll();
	  return taggingService.tagRoom(rooms, rules);
  }
}